stanFolder   = "C:/Users/Joni/Documents/GitHub/Master_thesis/Stan/"
load(paste(dataFolder, "dataObjects_YN.rdata", sep = ""))
load(paste(dataFolder, "dataObjects_AFC.rdata", sep = ""))
#### Compile stan model ####
library(rstan)
linmod_hiera = stan_model(paste(stanFolder, "hierarchical_linear.stan", sep = ""))
#### Collect data into lists ####
collectData = function(dataAdapt, dataRandom, N_param){
x = c()
y = c()
param = c()
for(i in 1:N_param){
y_1 = dataAdapt[[i]][,800]
y_2 = dataRandom[[i]][,800]
x_0 = c(rep(0, length(y_1)), rep(1, length(y_2)))
y = append(y, c(y_1, y_2))
x = append(x, x_0)
param = append(param, rep(i, length(x_0)))
}
y = (y - mean(y)) / sd(y)
N = length(y)
return(list(x = x, y = y, N = N, N_param = N_param, param = param))
}
data_YN_SD = list()
data_YN_sq_error = list()
data_AFC_SD = list()
data_AFC_sq_error = list()
# Calculate squared errors:
sq_error_YN_adapt = list()
sq_error_YN_rand  = list()
sq_error_AFC_adapt = list()
sq_error_AFC_rand  = list()
for(i in 1:9){
sq_error_YN_adapt[[i]] = (dataObjects_YN$adaptive$muTheta[[i]]  - dataObjects_YN$adaptive$genTheta[,i])^2
sq_error_YN_rand[[i]]  = (dataObjects_YN$random_fs$muTheta[[i]] - dataObjects_YN$random_fs$genTheta[,i])^2
}
for(i in 1:7){
sq_error_AFC_adapt[[i]] = (dataObjects_AFC$adaptive$muTheta[[i]]  - dataObjects_AFC$adaptive$genTheta[,i])^2
sq_error_AFC_rand[[i]]  = (dataObjects_AFC$random_fs$muTheta[[i]] - dataObjects_AFC$random_fs$genTheta[,i])^2
}
# Collect data:
data_YN_SD = collectData(dataObjects_YN$adaptive$sdTheta, dataObjects_YN$random_fs$sdTheta, 9)
data_YN_sq_error = collectData(sq_error_YN_adapt, sq_error_YN_rand, 9)
data_AFC_SD = collectData(dataObjects_AFC$adaptive$sdTheta, dataObjects_AFC$random_fs$sdTheta, 7)
data_AFC_sq_error = collectData(sq_error_AFC_adapt, sq_error_AFC_rand, 7)
#### Fit models ####
fit_YN_SD = sampling(linmod_hiera, data = data_YN_SD, chains = 4, iter = 1500)
fit_YN_sq_error = sampling(linmod_hiera, data = data_YN_sq_error, chains = 4, iter = 1500)
fit_AFC_SD = sampling(linmod_hiera, data = data_AFC_SD, chains = 4, iter = 1500)
fit_AFC_sq_error = sampling(linmod_hiera, data = data_AFC_sq_error, chains = 4, iter = 1500)
#### Create plots ####
#
# Collect quantiles (95% and 50%) into matrices:
qs_YN_SD = matrix(NaN, ncol = 4, nrow = 9)
qs_YN_sq_error = matrix(NaN, ncol = 4, nrow = 9)
qs_AFC_SD = matrix(NaN, ncol = 4, nrow = 7)
qs_AFC_sq_error = matrix(NaN, ncol = 4, nrow = 7)
for(i in 1:9){
qs_YN_SD[i,] =  quantile(extract(fit_YN_SD, pars = "slope")[[1]][,i],
c(0.025, 0.25, 0.75, 0.975))
qs_YN_sq_error[i,] =  quantile(extract(fit_YN_sq_error, pars = "slope")[[1]][,i],
c(0.025, 0.25, 0.75, 0.975))
}
for(i in 1:7){
qs_AFC_SD[i,] =  quantile(extract(fit_AFC_SD, pars = "slope")[[1]][,i],
c(0.025, 0.25, 0.75, 0.975))
qs_AFC_sq_error[i,] =  quantile(extract(fit_AFC_sq_error, pars = "slope")[[1]][,i],
c(0.025, 0.25, 0.75, 0.975))
}
#
plotQuantiles = function(qs, parnames, N_param, mainTitle){
plot(NULL, ylim = c(0, N_param), xlim = range(qs), axes = F,
xlab = expression(paste(beta, "'")), ylab = "Parameter",
main = mainTitle)
abline(v = 0)
abline(v = pretty(range(qs)), lty = 2)
for(i in seq(1, N_param, 4)){
polygon(c(range(qs), rev(range(qs))), c(i-0.5, i-0.5, i+1.5, i+1.5),
col = rgb(0, 0, 0, 0.2),
border = NA)
}
for(i in 1:N_param){
lines(c(qs[i,c(1, 4)]), c(i, i), lwd = 4, lend = 1)
lines(c(qs[i,c(2, 3)]), c(i, i), lwd = 8, lend = 1)
}
axis(side = 1)
axis(side = 2, at = c(1.5 + 2 * 0:(length(parnames) - 2), N_param),
labels = parnames, las = 1)
}
#
parnames_YN = c(expression(sigma),
"crit",
expression(beta),
expression(paste(kappa, mu)),
expression(rho))
parnames_AFC = c(expression(sigma),
expression(beta),
expression(paste(kappa, mu)),
expression(rho))
# Save plots
png(filename = paste(figureFolder, "qs_YN_SD.png", sep = ""),
width = 5, height = 4, units = "in", res = 700)
plotQuantiles(qs_YN_SD, parnames_YN, 9, expression(paste("Y/N, marg.", sigma)))
dev.off()
png(filename = paste(figureFolder, "qs_YN_sq_error.png", sep = ""),
width = 5, height = 4, units = "in", res = 700)
plotQuantiles(qs_YN_sq_error, parnames_YN, 9, "Y/N, sq. error")
dev.off()
png(filename = paste(figureFolder, "qs_AFC_SD.png", sep = ""),
width = 5, height = 3.5, units = "in", res = 700)
plotQuantiles(qs_AFC_SD, parnames_AFC, 7, expression(paste("AFC, marg.", sigma)))
dev.off()
png(filename = paste(figureFolder, "qs_AFC_sq_error.png", sep = ""),
width = 5, height = 3.5, units = "in", res = 700)
plotQuantiles(qs_AFC_sq_error, parnames_AFC, 7, "AFC, sq. error")
dev.off()
plotQuantiles = function(qs, parnames, N_param, mainTitle){
plot(NULL, ylim = c(1, N_param), xlim = range(qs), axes = F,
xlab = expression(paste(beta, "'")), ylab = "Parameter",
main = mainTitle)
abline(v = 0)
abline(v = pretty(range(qs)), lty = 2)
for(i in seq(1, N_param, 4)){
polygon(c(range(qs), rev(range(qs))), c(i-0.5, i-0.5, i+1.5, i+1.5),
col = rgb(0, 0, 0, 0.2),
border = NA)
}
for(i in 1:N_param){
lines(c(qs[i,c(1, 4)]), c(i, i), lwd = 4, lend = 1)
lines(c(qs[i,c(2, 3)]), c(i, i), lwd = 8, lend = 1)
}
axis(side = 1)
axis(side = 2, at = c(1.5 + 2 * 0:(length(parnames) - 2), N_param),
labels = parnames, las = 1)
}
png(filename = paste(figureFolder, "qs_YN_SD.png", sep = ""),
width = 5, height = 4, units = "in", res = 700)
plotQuantiles(qs_YN_SD, parnames_YN, 9, expression(paste("Y/N, marg.", sigma)))
dev.off()
png(filename = paste(figureFolder, "qs_YN_sq_error.png", sep = ""),
width = 5, height = 4, units = "in", res = 700)
plotQuantiles(qs_YN_sq_error, parnames_YN, 9, "Y/N, sq. error")
dev.off()
png(filename = paste(figureFolder, "qs_AFC_SD.png", sep = ""),
width = 5, height = 3.5, units = "in", res = 700)
plotQuantiles(qs_AFC_SD, parnames_AFC, 7, expression(paste("AFC, marg.", sigma)))
dev.off()
png(filename = paste(figureFolder, "qs_AFC_sq_error.png", sep = ""),
width = 5, height = 3.5, units = "in", res = 700)
plotQuantiles(qs_AFC_sq_error, parnames_AFC, 7, "AFC, sq. error")
dev.off()
dataFolder   = "C:/Users/Joni/Documents/GitHub/Master_thesis/Simulation_and_experiment/Data/Simulation_data/"
load(paste(dataFolder, "dataObjects_YN.rdata", sep = ""))
load(paste(dataFolder, "dataObjects_AFC.rdata", sep = ""))
dim(dataObjects_YN$adaptive$genTheta)
dim(dataObjects_YN$random_fs$genTheta)
dim(dataObjects_AFC$adaptive$genTheta)
dim(dataObjects_AFC$random_fs$genTheta)
854/12
854/123
dataFolder   = "C:/Users/Joni/Documents/GitHub/Master_thesis/Simulation_and_experiment/Data/Simulation_data/"
figureFolder = "C:/Users/Joni/Documents/GitHub/Master_thesis/PDF/figures/"
stanFolder   = "C:/Users/Joni/Documents/GitHub/Master_thesis/Stan/"
load(paste(dataFolder, "dataObjects_YN.rdata", sep = ""))
load(paste(dataFolder, "dataObjects_AFC.rdata", sep = ""))
collectData = function(dataAdapt, dataRandom, N_param){
x = c()
y = c()
param = c()
for(i in 1:N_param){
y_1 = dataAdapt[[i]][,800]
y_2 = dataRandom[[i]][,800]
x_0 = c(rep(0, length(y_1)), rep(1, length(y_2)))
y = append(y, c(y_1, y_2))
x = append(x, x_0)
param = append(param, rep(i, length(x_0)))
}
y = (y - mean(y)) / sd(y)
N = length(y)
return(list(x = x, y = y, N = N, N_param = N_param, param = param))
}
data_YN_SD = list()
data_YN_sq_error = list()
data_AFC_SD = list()
data_AFC_sq_error = list()
# Calculate squared errors:
sq_error_YN_adapt = list()
sq_error_YN_rand  = list()
sq_error_AFC_adapt = list()
sq_error_AFC_rand  = list()
for(i in 1:9){
sq_error_YN_adapt[[i]] = (dataObjects_YN$adaptive$muTheta[[i]]  - dataObjects_YN$adaptive$genTheta[,i])^2
sq_error_YN_rand[[i]]  = (dataObjects_YN$random_fs$muTheta[[i]] - dataObjects_YN$random_fs$genTheta[,i])^2
}
for(i in 1:7){
sq_error_AFC_adapt[[i]] = (dataObjects_AFC$adaptive$muTheta[[i]]  - dataObjects_AFC$adaptive$genTheta[,i])^2
sq_error_AFC_rand[[i]]  = (dataObjects_AFC$random_fs$muTheta[[i]] - dataObjects_AFC$random_fs$genTheta[,i])^2
}
data_YN_SD = collectData(dataObjects_YN$adaptive$sdTheta, dataObjects_YN$random_fs$sdTheta, 9)
data_YN_sq_error = collectData(sq_error_YN_adapt, sq_error_YN_rand, 9)
data_AFC_SD = collectData(dataObjects_AFC$adaptive$sdTheta, dataObjects_AFC$random_fs$sdTheta, 7)
dim(data_YN_SD$y)
matplot(dataObjects_YN$adaptive$sdTheta[[1]], lty = 1, type = "l", col = "black")
matplot(t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
matplot(t(log(dataObjects_YN$adaptive$sdTheta[[1]])), lty = 1, type = "l", col = "black")
matplot(log(1:800),t(log(dataObjects_YN$adaptive$sdTheta[[1]])), lty = 1, type = "l", col = "black")
matplot(t(log(dataObjects_YN$adaptive$sdTheta[[1]])), lty = 1, type = "l", col = "black")
matplot(t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(pnorm(0.8 + x * -0.2), add = T)
curve(pnorm(0.8 + x * -0.2), add = T, col = "red")
curve(pnorm(0.8 + x * -2), add = T, col = "red")
curve(pnorm(0.8 + x * -2 + x^2 * 3), add = T, col = "red")
curve(pnorm(0.8 + x ^ 0.1), add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(pnorm(0.8 + x ^ 0.1), add = T, col = "red")
curve(pnorm(0.8 + x ^ 1), add = T, col = "red")
curve(pnorm(0.8 + x ^ 0.9), add = T, col = "red")
curve(pnorm(0.8 + x ^ -0.9), add = T, col = "red")
curve(pnorm(0.8 + (x * - 0.2)^0.9), add = T, col = "red")
curve(pnorm(0.8 + (x * - 0.2)^1), add = T, col = "red")
curve(pnorm(0.8 + (x * - 1.2)^1), add = T, col = "red")
curve(pnorm(0.8 + (x * - 1.2)^2), add = T, col = "red")
curve(pnorm(0.8 + (x * - 1.2)^-2), add = T, col = "red")
curve(pnorm(0.8 + (x * - 1.2)^0.1), add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(pnorm(0.8 + (x * - 1.2)^0.1), add = T, col = "red")
curve(pnorm(0.8 + (x * - 1.2)^2.1), add = T, col = "red")
0^2
curve(pnorm(0.8 + (x * - 1.2)^2), add = T, col = "red")
curve(pnorm(0.8 + (x * - 10)^2), add = T, col = "red")
curve(pnorm(0.8 + (x * - 10)), add = T, col = "red")
curve(pnorm((x * - 10)), add = T, col = "red")
curve(pnorm(((x - 2 )* - 10)), add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(pnorm(((x - 2 )* - 10)), add = T, col = "red")
curve(pnorm(((x - 1)* - 10)), add = T, col = "red")
curve(pnorm(((x - 1)* - 10)) * 0.8 + 0.2, add = T, col = "red")
curve(pnorm(((x - 1) * 10)) * 0.8 + 0.2, add = T, col = "red")
curve(pnorm(((x - 1) * -1)) * 0.8 + 0.2, add = T, col = "red")
curve(pnorm(((x - 1) * -5)) * 0.8 + 0.2, add = T, col = "red")
curve(pnorm(x * 5) * 0.8 + 0.2, add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(pnorm(x * 5) * 0.8 + 0.2, add = T, col = "red")
matplot((1:800)/800-0.5,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(pnorm(x * 5) * 0.8 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm(x * -5) * 0.8 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm(x * -5) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm(x * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
matplot((1:800)/800-0.5,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(pnorm(x * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x - 1) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 1) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0.1) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0.2) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0.3) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0.5) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0.4) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0.45) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
matplot((1:800)/800-0.5,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(pnorm((x + 0.45) * -15) * 0.6 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0.45) * -15) * 0.7 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0.45) * -20) * 0.7 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(pnorm((x + 0.45) * -40) * 0.7 + 0.2, add = T, col = "red", -0.5, 0.5)
curve(exp(-3 * x), 0, 1)
curve(exp(-30 * x), 0, 1)
curve(exp(-30 * x) + 0.2, 0, 1)
curve(exp(-30 * x) * 0.8 + 0.2, 0, 1)
curve(exp((-30 * x)^1) * 0.8 + 0.2, 0, 1)
curve(exp((-30 * x)^1.2) * 0.8 + 0.2, 0, 1)
curve(exp((-30 * x)^3) * 0.8 + 0.2, 0, 1)
curve(exp((-30 * x)^0) * 0.8 + 0.2, 0, 1)
curve(exp((-30 * x)^0.1) * 0.8 + 0.2, 0, 1)
curve(exp((-30 * x))^0.1 * 0.8 + 0.2, 0, 1)
curve(exp((-30 * x))^0.2 * 0.8 + 0.2, 0, 1)
curve(exp((-30 * x))^20 * 0.8 + 0.2, 0, 1)
curve(exp((-30 * x))^4 * 0.8 + 0.2, 0, 1)
matplot((1:800)/800-0.5,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(exp((-30 * x))^4 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-20 * x))^4 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-5 * x))^4 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-10 * x))^4 * 0.8 + 0.2, 0, 1, add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(exp((-10 * x))^4 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-10 * x))^0.7 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-50 * x))^0.7 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-50 * x))^0.1 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-150 * x))^0.1 * 0.8 + 0.2, 0, 1, add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(exp((-150 * x))^0.1 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-200 * x))^0.1 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-2 * x))^5 * 0.8 + 0.2, 0, 1, add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(exp((-2 * x))^5 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-2 * x))^15 * 0.8 + 0.2, 0, 1, add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(exp((-2 * x))^15 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-2 * x^1)) * 0.8 + 0.2, 0, 1, add = T, col = "red")
0^1
curve(exp((-2 * x^1)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-20 * x^1)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-20 * x^0.2)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-20 * x^2)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-20 * x^1.5)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(exp((-20 * x^1.5)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-40 * x^1.5)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-40 * x^2.5)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-40 * x^0.5)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
curve(exp((-40 * x^0.9)) * 0.7 + 0.2, 0, 1, add = T, col = "red")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]]), lty = 1, type = "l", col = "black")
curve(exp((-2 * x))^15 * 0.8 + 0.2, 0, 1, add = T, col = "red")
curve(0.7 * (1 + 0)^2)
curve(0.7 * (1 + 0)^x)
curve(0.7 * (1 + 1)^x)
curve(0.7 * (1 + -1)^x)
curve(0.7 * (1 + -0.1)^x)
curve(0.7 * (1 + -0.6)^x)
curve(0.1 * (1 + -0.6)^x)
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]])^2, lty = 1, type = "l", col = "black")
matplot((1:800)/800,t(dataObjects_YN$adaptive$sdTheta[[1]])^1, lty = 1, type = "l", col = "black")
matplot((1:800)/800,1/t(dataObjects_YN$adaptive$sdTheta[[1]])^2, lty = 1, type = "l", col = "black")
matplot((1:800)/800,1/t(dataObjects_YN$adaptive$sdTheta[[2]])^2, lty = 1, type = "l", col = "black")
matplot((1:800)/800,1/t(dataObjects_YN$adaptive$sdTheta[[3]])^2, lty = 1, type = "l", col = "black")
matplot((1:800)/800,1/t(dataObjects_YN$adaptive$sdTheta[[4]])^2, lty = 1, type = "l", col = "black")
matplot((1:800)/800,1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2, lty = 1, type = "l", col = "black")
matplot((800:1)/800,1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2, lty = 1, type = "l", col = "black")
matplot(1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2, lty = 1, type = "l", col = "black")
matplot(1/t(rev(dataObjects_YN$adaptive$sdTheta[[5]]))^2, lty = 1, type = "l", col = "black")
matplot(1/rev(t(dataObjects_YN$adaptive$sdTheta[[5]]))^2, lty = 1, type = "l", col = "black")
matplot(1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2, lty = 1, type = "l", col = "black")
lm(1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2 ~ (1:800))
lm((1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2) ~ (1:800))
y = 1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2
x = 1:800
lm(y ~ x)
apply(1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2, 2, mean)
plot(apply(1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2, 2, mean), type = "l")
plot(apply(1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2, 1, mean), type = "l")
plot(apply(1/t(dataObjects_YN$adaptive$sdTheta[[5]])^2, 1, mean), type = "l", col = "red")
points(apply(1/t(dataObjects_YN$random_fs$sdTheta[[5]])^2, 1, mean), type = "l")
plot(apply(1/t(dataObjects_YN$adaptive$sdTheta[[1]])^2, 1, mean), type = "l", col = "red")
points(apply(1/t(dataObjects_YN$random_fs$sdTheta[[1]])^2, 1, mean), type = "l")
plot(apply(1/t(dataObjects_YN$adaptive$sdTheta[[2]])^2, 1, mean), type = "l", col = "red")
points(apply(1/t(dataObjects_YN$random_fs$sdTheta[[2]])^2, 1, mean), type = "l")
plot(apply(1/t(dataObjects_YN$adaptive$sdTheta[[3]])^2, 1, mean), type = "l", col = "red")
points(apply(1/t(dataObjects_YN$random_fs$sdTheta[[3]])^2, 1, mean), type = "l")
plot(apply(1/t(dataObjects_YN$adaptive$sdTheta[[4]])^2, 1, mean), type = "l", col = "red")
points(apply(1/t(dataObjects_YN$random_fs$sdTheta[[4]])^2, 1, mean), type = "l")
plot(apply(1/t(dataObjects_YN$adaptive$sdTheta[[6]])^2, 1, mean), type = "l", col = "red")
points(apply(1/t(dataObjects_YN$random_fs$sdTheta[[6]])^2, 1, mean), type = "l")
51/8
153/8
20e9/100
dataFolder   = "C:/Users/Joni/Documents/GitHub/Master_thesis/Simulation_and_experiment/Data/Simulation_data/"
figureFolder = "C:/Users/Joni/Documents/GitHub/Master_thesis/PDF/figures/"
stanFolder   = "C:/Users/Joni/Documents/GitHub/Master_thesis/Stan/"
load(paste(dataFolder, "dataObjects_YN.rdata", sep = ""))
load(paste(dataFolder, "dataObjects_AFC.rdata", sep = ""))
citation()
citation("pbivnorm")
setwd("C:\Users\Joni\Documents\GitHub\Master_thesis\Analysis\Analysis_of_Human_Data\analysis_files")
setwd("C:/Users/Joni/Documents/GitHub/Master_thesis/Analysis/Analysis_of_Human_Data/analysis_files")
load("modelFits_JP_AFC.rData")
load("modelFits_JP_YN.rData")
save(file = "/JP/dataForStanYN.rData", dataToSave_YN$dataForStanYN)
save(dataToSave_YN$dataForStanYN, file = "/JP/dataForStanYN.rData")
dataToSave_YN$dataForStanYN
save(list = dataToSave_YN$dataForStanYN, file = "/JP/dataForStanYN.rData")
save(list = c(dataToSave_YN$dataForStanYN), file = "/JP/dataForStanYN.rData")
save(dataToSave_YN$dataForStanYN, file = "/JP/dataForStanYN.rData")
save(list(dataToSave_YN$dataForStanYN), file = "/JP/dataForStanYN.rData")
save("dataToSave_YN$dataForStanYN", file = "/JP/dataForStanYN.rData")
dataToSave_YN$dataForStanYN
save(dataToSave_YN$dataForStanYN, file = "/JP/dataForStanYN.rData")
save(tmp, file = "/JP/dataForStanYN.rData")
tmp = dataToSave_YN$dataForStanYN
save(tmp, file = "/JP/dataForStanYN.rData")
save(tmp, file = "JP/dataForStanYN.rData")
dataForStanYN = dataToSave_YN$dataForStanYN
save(dataForStanYN, file = "JP/dataForStanYN.rData")
dataForStanYN = dataToSave_YN$dataForStanYN
fitYNModel_1 = dataToSave_YN$fitYesNo[[1]]
fitYNModel_2 = dataToSave_YN$fitYesNo[[2]]
fitYNModel_3 = dataToSave_YN$fitYesNo[[3]]
fitAFCModel_1 = dataToSave_AFC$fitAFC[[1]]
fitAFCModel_2 = dataToSave_AFC$fitAFC[[2]]
fitAFCModel_3 = dataToSave_AFC$fitAFC[[3]]
fitYN_both = dataToSave_YN$fitYN_both
fitYN_both = dataToSave_YN$fitYN_both
fitYN_both_T = dataToSave_YN$fitYN_both_t
fitAFC_both = dataToSave_AFC$fitAFC_both
fitAFC_both_T = dataToSave_AFC$fitAFC_both_t
dataForStanAFC = dataToSave_AFC$dataForStanAFC
dataForStanYN  = dataToSave_YN$dataForStanYN
dataForStanAFC = dataToSave_AFC$dataForStanAFC
fitYNModel_1 = dataToSave_YN$fitYesNo[[1]]
fitYNModel_2 = dataToSave_YN$fitYesNo[[2]]
fitYNModel_3 = dataToSave_YN$fitYesNo[[3]]
fitYN_both = dataToSave_YN$fitYN_both
fitYN_both_T = dataToSave_YN$fitYN_both_t
fitAFCModel_1 = dataToSave_AFC$fitAFC[[1]]
fitAFCModel_2 = dataToSave_AFC$fitAFC[[2]]
fitAFCModel_3 = dataToSave_AFC$fitAFC[[3]]
fitAFC_both = dataToSave_AFC$fitAFC_both
fitAFC_both_T = dataToSave_AFC$fitAFC_both_t
dataForStanYN  = dataToSave_YN$dataForStanYN
dataForStanAFC = dataToSave_AFC$dataForStanAFC
fitYNModel_1 = dataToSave_YN$fitYesNo[[1]]
fitYNModel_2 = dataToSave_YN$fitYesNo[[2]]
fitYNModel_3 = dataToSave_YN$fitYesNo[[3]]
fitYN_both = dataToSave_YN$fitYN_both
fitYN_both_T = dataToSave_YN$fitYN_both_t
fitAFCModel_1 = dataToSave_AFC$fitAFC[[1]]
fitAFCModel_2 = dataToSave_AFC$fitAFC[[2]]
fitAFCModel_3 = dataToSave_AFC$fitAFC[[3]]
fitAFC_both = dataToSave_AFC$fitAFC_both
fitAFC_both_T = dataToSave_AFC$fitAFC_both_t
#
save(dataForStanYN, file = "JP/dataForStanYN.rData")
save(dataForStanAFC, file = "JP/dataForStanAFC.rData")
save(fitYNModel_1, file = "JP/fitYNModel_1.rData")
save(fitYNModel_2, file = "JP/fitYNModel_2.rData")
save(fitYNModel_3, file = "JP/fitYNModel_3.rData")
save(fitYN_both,   file = "JP/fitYN_both.rData")
save(fitYN_both_T, file = "JP/fitYN_both_T.rData")
save(fitAFCModel_1, file = "JP/fitAFCModel_1.rData")
save(fitAFCModel_2, file = "JP/fitAFCModel_2.rData")
save(fitAFCModel_3, file = "JP/fitAFCModel_3.rData")
save(fitAFC_both,   file = "JP/fitAFC_both.rData")
save(fitAFC_both_T, file = "JP/fitAFC_both_T.rData")
load("postPredJP.rData")
post_pred_YN_obs = dataPostPredYN$obsProp
post_pred_YN_Model_1 = dataPostPredYN$mdl_1
post_pred_YN_Model_2 = dataPostPredYN$mdl_2
post_pred_YN_Model_3 = dataPostPredYN$mdl_3
post_pred_YN_Both   = dataPostPredYN$mdl_both
post_pred_YN_Both_T = dataPostPredYN$mdl_both_T
post_pred_AFC_obs = dataPostPredAFC$obsProp
post_pred_AFC_Model_1 = dataPostPredAFC$mdl_1
post_pred_AFC_Model_2 = dataPostPredAFC$mdl_2
post_pred_AFC_Model_3 = dataPostPredAFC$mdl_3
post_pred_AFC_Both   = dataPostPredAFC$mdl_both
post_pred_AFC_Both_T = dataPostPredAFC$mdl_both_T
#
save(post_pred_YN_obs, file = "JP/post_pred_YN_obs.rData")
save(post_pred_YN_Model_1, file = "JP/post_pred_YN_Model_1.rData")
save(post_pred_YN_Model_2, file = "JP/post_pred_YN_Model_2.rData")
save(post_pred_YN_Model_3, file = "JP/post_pred_YN_Model_3.rData")
save(post_pred_YN_Both, file = "JP/post_pred_YN_Both.rData")
save(post_pred_YN_Both_T, file = "JP/post_pred_YN_Both_T.rData")
save(post_pred_AFC_obs, file = "JP/post_pred_AFC_obs.rData")
save(post_pred_AFC_Model_1, file = "JP/post_pred_AFC_Model_1.rData")
save(post_pred_AFC_Model_2, file = "JP/post_pred_AFC_Model_2.rData")
save(post_pred_AFC_Model_3, file = "JP/post_pred_AFC_Model_3.rData")
save(post_pred_AFC_Both, file = "JP/post_pred_AFC_Both.rData")
save(post_pred_AFC_Both_T, file = "JP/post_pred_AFC_Both_T.rData")
fitYN_both_T
fitYN_both_T = dataToSave_YN$fitJPYNBoth_t
fitAFC_both_T = dataToSave_AFC$fitJPAFCBoth_t
save(fitYN_both_T, file = "JP/fitYN_both_T.rData")
save(fitAFC_both_T, file = "JP/fitAFC_both_T.rData")
setwd("C:/Users/Joni/Documents/GitHub/Master_thesis/Analysis/Analysis_of_Human_Data/analysis_files")
load("modelFits_OK.rData")
dataForStanYN  = dataToSave$dataForStanYN
dataForStanAFC = dataToSave$dataForStanAFC
fitYNModel_1 = dataToSave$fitYesNo[[1]]
fitYNModel_1
fitYNModel_2 = dataToSave$fitYesNo[[2]]
fitYNModel_3 = dataToSave$fitYesNo[[3]]
fitYN_both = dataToSave$fitYN_both
fitYN_both_T = dataToSave$fitOKYNBoth_t
fitYN_both_T = dataToSave$fitYN_both
fitAFCModel_1 = dataToSave$fitAFC[[1]]
fitAFCModel_2 = dataToSave$fitAFC[[2]]
fitAFCModel_3 = dataToSave$fitAFC[[3]]
fitAFC_both = dataToSave$fitAFC_both
fitAFC_both
save(dataForStanYN, file = "OK/dataForStanYN.rData")
save(dataForStanAFC, file = "OK/dataForStanAFC.rData")
save(fitYNModel_1, file = "OK/fitYNModel_1.rData")
save(fitYNModel_2, file = "OK/fitYNModel_2.rData")
save(fitYNModel_3, file = "OK/fitYNModel_3.rData")
save(fitYN_both,   file = "OK/fitYN_both.rData")
save(fitAFCModel_1, file = "OK/fitAFCModel_1.rData")
save(fitAFCModel_2, file = "OK/fitAFCModel_2.rData")
save(fitAFCModel_3, file = "OK/fitAFCModel_3.rData")
save(fitAFC_both,   file = "OK/fitAFC_both.rData")
load("postPredOK.rData")
post_pred_YN_obs = dataPostPredYN$obsProp
post_pred_YN_Model_1 = dataPostPredYN$mdl_1
post_pred_YN_Model_2 = dataPostPredYN$mdl_2
post_pred_YN_Model_3 = dataPostPredYN$mdl_3
post_pred_YN_Both   = dataPostPredYN$mdl_both
post_pred_AFC_obs = dataPostPredAFC$obsProp
post_pred_AFC_Model_1 = dataPostPredAFC$mdl_1
post_pred_AFC_Model_2 = dataPostPredAFC$mdl_2
post_pred_AFC_Model_3 = dataPostPredAFC$mdl_3
post_pred_AFC_Both   = dataPostPredAFC$mdl_both
save(post_pred_YN_obs, file = "OK/post_pred_YN_obs.rData")
save(post_pred_YN_Model_1, file = "OK/post_pred_YN_Model_1.rData")
save(post_pred_YN_Model_2, file = "OK/post_pred_YN_Model_2.rData")
save(post_pred_YN_Model_3, file = "OK/post_pred_YN_Model_3.rData")
save(post_pred_YN_Both, file = "OK/post_pred_YN_Both.rData")
save(post_pred_AFC_obs, file = "OK/post_pred_AFC_obs.rData")
save(post_pred_AFC_Model_1, file = "OK/post_pred_AFC_Model_1.rData")
save(post_pred_AFC_Model_2, file = "OK/post_pred_AFC_Model_2.rData")
save(post_pred_AFC_Model_3, file = "OK/post_pred_AFC_Model_3.rData")
save(post_pred_AFC_Both, file = "OK/post_pred_AFC_Both.rData")
post_pred_AFC_obs
